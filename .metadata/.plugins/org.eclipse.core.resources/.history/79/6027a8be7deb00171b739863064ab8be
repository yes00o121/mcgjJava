package com.mcgj.service;

import java.util.Date;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mcgj.context.ProjectContext;
import com.mcgj.dao.UserMapper;
import com.mcgj.entity.User;
import com.mcgj.redis.RedisHashUtil;
import com.mcgj.security.MD5Util;

@Service
public class UserService implements IUserService{

	@Autowired
	private UserMapper userMapper;
	
	/**
	 * 登录方法
	 */
	public User login(User user) {
		//判断数据合法性
		if(user.getAccount() == null || "".equals(user.getAccount())){
			throw new RuntimeException("账号不能为空");
		}
		if(user.getPassword() == null || "".equals(user.getPassword())){
			throw new RuntimeException("密码不能为空");
		}
		//将用户密码进行加密转换
		user.setPassword(MD5Util.getMD5(user.getPassword().getBytes()));
		User record = userMapper.login(user);//查询用户数据
		if(record == null){
			throw new RuntimeException("用户不存在或密码错误");
		}
		//登录后生成用户唯一的token，写入缓存中
		String auth = MD5Util.getMD5((user.getAccount()+""+user.getPassword()).getBytes());
		RedisHashUtil.setex(UUID.randomUUID().toString(),user,1800);
		//将token返回给用户，作为唯一认证
		record.setToken(auth);
		recordContext(record);
		return record;
	}
	
	/**
	 * 记录上下文
	 */
	public void recordContext(User user){
		ProjectContext pc = new ProjectContext();
		pc.setUser(user);
		ProjectContext.setProjectContext(pc);
	}
	
	/**
	 * 用户注册方法
	 */
	public void register(User user) {
		//数据合法性判断
		if(user.getAccount() == null || "".equals(user.getAccount())){
			throw new RuntimeException("账号不能为空");
		}
		if(user.getPassword() == null || "".equals(user.getPassword())){
			throw new RuntimeException("密码不能为空");
		}
		if(user.getUserName() == null || "".equals(user.getUserName())){
			throw new RuntimeException("用户名不能为空");
		}
		if(user.getPhoto() == null || "".equals(user.getPhoto())){
			throw new RuntimeException("头像不能为空");
		}
		//判断账号是否存在
		User record = this.findUserByAccount(user.getAccount());
		if(record != null){
			throw new RuntimeException("账号已存在");
		}
		//对密码进行加密
		user.setPassword(MD5Util.getMD5(user.getPassword().getBytes()));
		this.insert(user);//将数据插入user表
	}
	/**
	 * 上传图片接口
	 * @return
	 */
	public String upload(){
		return null;
	}

	public void delete(Integer id) {
		
	}
	/**
	 * 插入方法
	 */
	public void insert(User record) {
		this.userMapper.insert(record);
	}

	public void update(User record) {
		
	}

	public User selectById(Integer id) {
		
		return null;
	}
	
	/**
	 * 根据用户账号查询用户数据
	 * @param account
	 * @return
	 */
	public User findUserByAccount(String account) {
		User user = this.userMapper.findUserByAccount(account);
		return user;
	}
	

}	
